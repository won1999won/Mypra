<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ohgiraffers.section01.xml.DynamicSqlMapper">

    <resultMap id="menuResultMap" type="MenuDTO">
        <id property="code" column="MENU_CODE"/>
        <result property="name" column="MENU_NAME"/>
        <result property="price" column="MENU_PRICE"/>
        <result property="categoryCode" column="CATEGORY_CODE"/>
        <result property="orderableStatus" column="ORDERABLE_STATUS"/>
    </resultMap>

    <!-- <if> 태그 : test 속성의 조건에 해당될 때만 엘리먼트 구문을 쿼리에 포함한다.

     OGNL(Object Graph Navigation Language)
     : single quotation('') 구간의 값은 리터럴 값으로 보고 그게 아닌 이름은 객체 필드 또는 변수로 인식하게
       작성하는 기법이다.-->
    <select id="selectMenuByPrice" parameterType="hashmap" resultMap="menuResultMap">
        SELECT A.MENU_CODE
              , A.MENU_NAME
              , A.MENU_PRICE
              , A.CATEGORY_CODE
              , A.ORDERABLE_STATUS
        FROM  TBL_MENU A
        WHERE A.ORDERABLE_STATUS = 'Y'
        <if test="price gte 0 and price lte 10000">
            <![CDATA[
            AND A.MENU_PRICE < #{ price }
            ]]>
        </if>
        <if test="price gt 10000 and price lte 20000">
            AND A.MENU_PRICE BETWEEN 10000 AND #{ price }
        </if>
        <if test="price gt 20000 and price lte 30000">
            AND A.MENU_PRICE BETWEEN 20000 AND #{ price }
        </if>
        <if test="price gt 30000">
            AND A.MENU_PRICE BETWEEN 30000 AND #{ price }
        </if>
        ORDER BY A.MENU_CODE
    </select>
    <select id="searchMenu" parameterType="SearchCriteria" resultMap="menuResultMap">
        SELECT A.MENU_CODE
        , A.MENU_NAME
        , A.MENU_PRICE
        , A.CATEGORY_CODE
        , A.ORDERABLE_STATUS
        FROM  TBL_MENU A
        <if test="condition == 'category'">
            JOIN TBL_CATEGORY B ON (A.CATEGORY_CODE = B.CATEGORY_CODE)
        </if>
        WHERE A.ORDERABLE_STATUS = 'Y'
        <if test="condition == 'name'">
            AND A.MENU_NAME LIKE CONCAT('%', #{ value }, '%')
        </if>
        <if test="condition == 'category'">
            AND B.CATEGORY_NAME = #{ value }
        </if>
        ORDER BY A.MENU_CODE
    </select>

    <!-- <when>태그 test 속성 조건에 부합하면 when 엘리먼트 구문을 쿼리에 포함한다.
        어떠한 when 조건도 만족하지 못하면 otherwise 엘리먼트 구문을 쿼리에 포함한다.-->
    <select id="searchMenuBySupCategory" parameterType="SearchCriteria" resultMap="menuResultMap">
        SELECT A.MENU_CODE
        , A.MENU_NAME
        , A.MENU_PRICE
        , A.CATEGORY_CODE
        , A.ORDERABLE_STATUS
        FROM  TBL_MENU A
        WHERE A.ORDERABLE_STATUS = 'Y'
        <choose>
            <when test="value == '식사'">
                AND A.CATEGORY_CODE IN (4, 5, 6, 7)
            </when>
            <when test="value == '음료'">
                AND A.CATEGORY_CODE IN (8, 9, 10)
            </when>
            <otherwise>
                AND A.CATEGORY_CODE IN (11, 12)
            </otherwise>
        </choose>
        ORDER BY A.MENU_CODE
    </select>
    <!-- <foreach>태그 : Java의 for문처럼 역할을 한다.
                        1. collection : 반복을 수행할 대상
                        2. item : 반복을 수행할 때마다 꺼내올 값의 이름 설정
                        3. open : <foreach> 엘리먼트 구문의 가장 앞에 올 문자
                        4. separator 속성 : 반복이 수행될 때 꺼내온 item 사이에 들어갈 문자
                        5. close : 엘리먼트 구문의 마지막에 올 문자 -->
    <select id="searchMenuByRandomMenuCode" parameterType="hashmap" resultMap="menuResultMap">
        SELECT A.MENU_CODE
        , A.MENU_NAME
        , A.MENU_PRICE
        , A.CATEGORY_CODE
        , A.ORDERABLE_STATUS
        FROM  TBL_MENU A
        WHERE A.MENU_CODE IN
        <foreach collection="randomMenuCodeList" item="menuCode" open="(" separator=", " close=")">
            #{ menuCode }
        </foreach>
    </select>


    <!-- <where> 태그 : 엘리먼트 구문이 where로 시작하지 않으면 자동으로 where를 붙여준다.
                        또한 where엘리먼트 내부에 모두 쿼리문이 추가되지 않는 상황인 경우 where를 무시한다.
                        엘리먼트 구문이 AND나 OR로 시작하면 자동으로 해당 단어를 지워준다. -->

    <!-- <trim> 태그 : 조회 조건에 AND 혹은 OR로 시작하지 않는 다른 문자로 시작하는 경우 등
                        where 엘리먼트가 기본적으로 처리하는 기능에 추가 규칙을 정의하기 위해 trim엘리먼트를 제공한다.
                        1. prefix : 처리 후 엘리먼트의 내용이 있으면 가장 앞에 붙여주는 내용 기술
                        2. prefixOverrides : 처리 후 엘리먼트 내용 중 가장 앞에 속성값에 해당하는 문자를 자동 삭제
                        3. suffix : 처리 후 엘리먼트의 내용이 있으면 가장 뒤에 붙여주는 내용 기술
                        4. suffixOverrides : 처리 후 엘리먼트 내용 중 가장 뒤에 속성값에 해당하는 문자를 자동 삭제 -->

    <select id="searchMenuByCodeOrSearchAll" parameterType="SearchCriteria" resultMap="menuResultMap">
        SELECT A.MENU_CODE
            , A.MENU_NAME
            , A.MENU_PRICE
            , A.CATEGORY_CODE
            , A.ORDERABLE_STATUS
         FROM  TBL_MENU A
        <if test ="condition != null and condition eq 'menuCode'">
            <where>
                A.MENU_CODE = #{ value }
            </where>
        </if>
    </select>

    <select id="searchMenuByNameOrCategory" parameterType="hashmap" resultMap="menuResultMap">
        SELECT A.MENU_CODE
             , A.MENU_NAME
             , A.MENU_PRICE
             , A.CATEGORY_CODE
             , A.ORDERABLE_STATUS
         FROM  TBL_MENU A
        <!-- 문제 상황 발생 : 카테고리로만 조회하는 경우 where가 붙지 않아 쿼리 오류로 조회 불가
        <if test = "nameValue != null">
            WHERE A.MENU_NAME LIKE CONCAT('%', #{ nameValue }, '%')
        </if>
        <if test="categoryValue != null">
            AND A.CATEGORY_CODE = #{ categoryValue }
        </if> -->

        <!-- 해결방법 1 : <where>태그 이용 -->
       <!-- <where>
             <if test = "nameValue != null">
                A.MENU_NAME LIKE CONCAT('%', #{ nameValue }, '%')
            </if>
            <if test="categoryValue != null">
                AND A.CATEGORY_CODE = #{ categoryValue }
            </if>
        </where> -->

        <trim prefix="WHERE" prefixOverrides="AND | OR">
            <if test = "nameValue != null">
                A.MENU_NAME LIKE CONCAT('%', #{ nameValue }, '%')
            </if>
            <if test="categoryValue != null">
                AND A.CATEGORY_CODE = #{ categoryValue }
            </if>
        </trim>
    </select>
    <!-- 문제 상황 발생 : 메뉴명 값을 입력하지 않은 경우 set이 붙지 않아 쿼리 오류 발생. -->
<!--    <update id="modifyMenu" parameterType="hashmap">-->
<!--        UPDATE-->
<!--            TBL_MENU-->
<!--        <if test="name != null and name != ''">-->
<!--            SET MENU_NAME = #{ name }-->
<!--        </if>-->
<!--        <if test="categoryCode != null and categoryCode gt 0">-->
<!--            , CATEGORY_CODE = #{ categoryCode }-->
<!--        </if>-->
<!--        <if test="orderableStatus != null and orderableStatus != ''">-->
<!--            , ORDERABLE_STATUS = #{ orderableStatus }-->
<!--        </if>-->
<!--        WHERE MENU_CODE = #{ code }-->
<!--    </update>-->

    <update id="modifyMenu" parameterType="hashmap">
        UPDATE
        TBL_MENU
        <!-- 해결방안1 <set>태그 이용 -->
<!--        <set>-->
<!--            <if test="name != null and name != ''">-->
<!--                 MENU_NAME = #{ name }-->
<!--            </if>-->
<!--            <if test="categoryCode != null and categoryCode gt 0">-->
<!--                , CATEGORY_CODE = #{ categoryCode }-->
<!--            </if>-->
<!--            <if test="orderableStatus != null and orderableStatus != ''">-->
<!--                , ORDERABLE_STATUS = #{ orderableStatus }-->
<!--            </if>-->
<!--        </set>-->

        <!-- 해결방안2. <trim> 태그 이용 -->
        <trim prefix="SET" prefixOverrides=",">
            <if test="name != null and name != ''">
                MENU_NAME = #{ name }
            </if>
            <if test="categoryCode != null and categoryCode gt 0">
                , CATEGORY_CODE = #{ categoryCode }
            </if>
            <if test="orderableStatus != null and orderableStatus != ''">
                , ORDERABLE_STATUS = #{ orderableStatus }
            </if>
        </trim>
        WHERE MENU_CODE = #{ code }
    </update>

</mapper>