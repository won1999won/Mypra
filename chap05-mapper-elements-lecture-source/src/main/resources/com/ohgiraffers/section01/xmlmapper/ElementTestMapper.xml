<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ohgiraffers.section01.xmlmapper.ElementTestMapper">


    <cache eviction="LRU" flushInterval="1000" size="512" readOnly="true"/>

    <select id="selectCacheTest" resultType="java.lang.String">
        SELECT MENU_NAME
        FROM TBL_MENU A
    </select>

    <!--<resultMap>엘리먼트
    1.DB에서 조회한 결과 데이터를 객체에 로드하는 방법을 정의하는 엘리먼트
    2.resultMap 엘리먼트는 MyBatis 에서 최중요 엘리먼트다
    ===================================
    <resultMap> 엘리먼트속성
    1.id:매핑 구문에서 결과 매핑을 사용할때 구분하기위한 아이디
    2.Type:결과 패핑을 적용하는 대상 객체타입(매핑구문의 결과 데이터를 저장할 java타입을 지정)
    3.extends: 자바의 상속처럼 기존에 정의된 매핑결과를 상속받아 추가적인 매핑정보로 확장할때 사용한다
    (부모 resultMap 아이디 사용)
    4.autoMapping:결과 매핑을 자동 매핑할것인지 결정한다 auto매핑설정은 동일한  컬럼명이 존재할경우 위험하기에 비추천-->

    <resultMap id="menuResultMap1" type="com.ohgiraffers.common.MenuDTO" autoMapping="false">
        <id property="code" column="MENU_CODE"/>
        <result property="name" column="MENU_NAME"/>
        <result property="price" column="MENU_PRICE"/>
        <result property="categoryCode" column="CATEGORY_CODE"/>
    </resultMap>
    <resultMap id="menuResultMap2" type="com.ohgiraffers.common.MenuDTO" extends="menuResultMap1">
        <result property="orderableStatus" column="ORDERABLE_STATUS"/>
    </resultMap>

    <select id="selectResultMapTest" resultMap="menuResultMap2">
        SELECT A.MENU_CODE
        ,A.MENU_NAME
        ,A.MENU_PRICE
        ,A.CATEGORY_CODE
        ,A.ORDERABLE_STATUS
        FROM TBL_MENU A
        WHERE A.ORDERABLE_STATUS='Y'
    </select>
    <!--<resultMap> 하위 엘리먼트
    <id>:primary key 컬럼을 매핑하기위한 태그
    <result>:po가 아닌 일반컬럼에 매핑하기위한 태그
    <constructor>:인스턴스화 되는 클래스의 생성자에 결과를 삽입하기위해 사용
    <idArg>,<arg>등
    <association>:복잡한 타입의 연관관개로 1:1포함관계일 경우 사용
    <collection>:복잡한 타입의 연관돤계로 1:다 포함관게일경우사용
    <discrimnator>: 조건에따라 다른 resultMap이 매핑되도록한다-->
    <resultMap id="menuResultMap3" type="com.ohgiraffers.common.MenuDTO" autoMapping="false">
        <constructor>
            <idArg column="MENU_CODE" javaType="_int"/>
            <arg column="MENU_NAME" javaType="string"/>
            <arg column="MENU_PRICE" javaType="_int"/>
            <arg column="CATEGORY_CODE" javaType="_int"/>
            <arg column="ORDERABLE_STATUS" javaType="string"/>
        </constructor>
    </resultMap>
    <!--id,result 엘리먼트는 setter를 이용하기에 property에 필드명을 지정
    생성자를 사용하는 경우 순서와 타입을 맞춰서 기재-->


    <select id="selectResultMapConstructorTest" resultMap="menuResultMap3">
        SELECT A.MENU_CODE
             ,A.MENU_NAME
             ,A.MENU_PRICE
             ,A.CATEGORY_CODE
             ,A.ORDERABLE_STATUS
        FROM TBL_MENU A
        WHERE A.ORDERABLE_STATUS='Y'
    </select>

<!--    <resultMap id="menuAndCategoryResultMap" type="com.ohgiraffers.common.MenuandCategoryDTO">-->
<!--        <id property="code" column="MENU_CODE"/>-->
<!--        <result property="name" column="MENU_NAME"/>-->
<!--        <result property="price" column="MENU_PRICE"/>-->
<!--        <result property="oderableStatus" column="ODERABLE_STATUS"/>-->
<!--        <association property="category" resultMap="categoryResultMap"/>-->

<!--    </resultMap>-->

<!--    <resultMap id="categoryResultMap" type="com.ohgiraffers.common.CategoryDTO">-->
<!--        <id property="code" column="CATEGORY_CODE"/>-->
<!--        <result property="name" column="CATEGORY_NAME"/>-->
<!--        <result property="refCategoryCode" column="REF_CATEGORY_CODE"/>-->

<!--    </resultMap>-->
    <resultMap id="menuAndCategoryResultMap" type="com.ohgiraffers.common.MenuandCategoryDTO">
        <id property="code" column="MENU_CODE"/>
        <result property="name" column="MENU_NAME"/>
        <result property="price" column="MENU_PRICE"/>
        <result property="orderableStatus" column="ORDERABLE_STATUS"/>
        <association property="category" javaType="com.ohgiraffers.common.CategoryDTO">
            <id property="code" column="CATEGORY_CODE"/>
            <result property="name" column="CATEGORY_NAME"/>
            <result property="refCategoryCode" column="REF_CATEGORY_CODE"/>
        </association>
    </resultMap>

    <select id="selectResultMapAssociationTest" resultMap="menuAndCategoryResultMap">
        SELECT A.MENU_CODE
        ,A.MENU_NAME
        ,A.MENU_PRICE
        ,B.CATEGORY_CODE
        ,B.CATEGORY_NAME
        ,B.REF_CATEGORY_CODE
        ,A.ORDERABLE_STATUS
        FROM TBL_MENU A
        JOIN TBL_CATEGORY B ON(A.CATEGORY_CODE=B.CATEGORY_CODE)
        WHERE A.ORDERABLE_STATUS='Y'
    </select>

    <!-- collection,association은 본문 맨 아래에 작성-->
    <!-- 따로만든 resultMap 사용-->
<!--    <resultMap id="categoryAndMenuResultMap" type="com.ohgiraffers.common.CategoryAndMenuDTO">-->
<!--        <id property="code" column="CATEGORY_CODE"/>-->
<!--        <result property="name" column="CATEGORY_NAME"/>-->
<!--        <result property="refCategoryCode" column="REF_CATEGORY_CODE"/>-->
<!--        <collection property="menuList" resultMap="menuResultMap"/>-->
<!--    </resultMap>-->
<!--    <resultMap id="menuResultMap" type="com.ohgiraffers.common.MenuDTO">-->
<!--        <id property="code" column="MENU_CODE"/>-->
<!--        <result property="name" column="MENU_NAME"/>-->
<!--        <result property="price" column="MENU_PRICE"/>-->
<!--        <result property="categoryCode" column="CATEGORY_CODE"/>-->
<!--        <result property="orderableStatus" column="ORDERABLE_STATUS"-->

<!--    </resultMap>-->

    <!--컬렉션내 id,result 작성하는 방법-->
    <resultMap id="categoryAndMenuResultMap" type="com.ohgiraffers.common.CategoryAndMenuDTO">
        <id property="code" column="CATEGORY_CODE"/>
        <result property="name" column="CATEGORY_NAME"/>
        <result property="refCategoryCode" column="REF_CATEGORY_CODE"/>
        <collection property="menuList" ofType="com.ohgiraffers.common.MenuDTO">
            <id property="code" column="MENU_CODE"/>
            <result property="name" column="MENU_NAME"/>
            <result property="price" column="MENU_PRICE"/>
            <result property="categoryCode" column="CATEGORY_CODE"/>
            <result property="orderableStatus" column="ORDERABLE_STATUS"/>
        </collection>


    </resultMap>
    <select id="selectResultMapCollectionTest" resultMap="categoryAndMenuResultMap">
        SELECT A.CATEGORY_CODE
        ,A.CATEGORY_NAME
        ,A.REF_CATEGORY_CODE
        ,B.MENU_CODE
        ,B.MENU_NAME
        ,B.MENU_PRICE
        ,B.CATEGORY_CODE
        ,B.ORDERABLE_STATUS
        FROM TBL_CATEGORY A LEFT JOIN TBL_MENU B ON(A.CATEGORY_CODE=B.CATEGORY_CODE)
        ORDER BY A.CATEGORY_CODE
    </select>
    <!-- <sql>엘리먼트
    각 매핑 구문에서 공통으로 사용가능한 sql 문자열의 일부를 정의하고 재사용 할수있다-->
    <sql id="columns">
        MENU_CODE,
    MENU_NAME,
    MENU_PRICE,
    CATEGORY_CODE,
    ORDERABLE_STATUS
    </sql>

    <select id="selectSqlTest" resultMap="menuResultMap2">
        SELECT
        <include refid="columns"/>
        FROM TBL_MENU
        WHERE ORDERABLE_STATUS='Y'
    </select>

    <!--<insert> 엘리먼트
    insert,update,delete 엘리먼트는 사용하는 속성이 대부분 동일하지만 insert에릴먼트는 좀더 많은 속성을 정의할수있다
    <공통속성>
    id: 매핑구문을 구분하는 id
    parameterType: 파라미터의 타입 지정.이미 정의된 별칭을 사용하거나 클래스의 풀네임을 사용
    flushcache:매핑구문을 실행할때 캐시 삭제 여부 설정
    timeout:sql을 실행한후 응답을 기다리는 최대시간 보통은 미사용하며 JBDC드라이버 자체의 타임아웃값을 사용
    statementType:JDNC 구문타입 지정 STATMENT,PREPARED,CALLABLE중 하나를 쓸수있으며 기본값은 PREPARED
    <추가속성>
    useGenerateKeys:생성 키 값을 만들기 위해 JDBC의 getGenerateKeys 메소드를 호출할지 결정하며 기본값은 false
    Keyproperty:insert 구문의 하위 엘리먼트인 selectKey 엘리먼트에 의한 반환 값을 설정할 프로퍼티를 지정
    KeyColumn: 생성키를 가진 테이블의 컬럼명을 설정 (키 컬럼이 테이블의 첫 행이 아닌 데이터베이스에서만 필요)-->

    <insert id="insertNewCategory">
        INSERT INTO
        TBL_CATEGORY(CATEGORY_NAME)
        VALUES (#{category.name})
    </insert>
    <insert id="insertNewMenu">
        <selectKey keyProperty="category.code" order="BEFORE" resultType="_int">
            SELECT AUTO_INCREMENT-1
            FROM INFORMATION_SCHEMA.TABLES
            WHERE TABLE_SCHEMA='menudb'
            AND TABLE_NAME='tbl_category'
        </selectKey>
            INSERT INTO TBL_MENU (MENU_NAME,MENU_PRICE,CATEGORY_CODE,ORDERABLE_STATUS)VALUES(#{ name },#{ price },#{ category.code },#{orderableStatus})
    </insert>

</mapper>